syntax = "proto3";

package warehouse;

option go_package = "github.com/CrabStash/crab-stash-protofiles/warehouse/proto";
import "google/protobuf/empty.proto";

// enums
enum Roles {
  ROLE_VIEWER = 0;
  ROLE_CC = 1;
  ROLE_MOD = 2;
  ROLE_ADMIN = 3;
  ROLE_OWNER = 4;
}

// GetInfo
message GetInfoRequest {
  string warehouseID = 1; // @gotags: valid:"required,minstringlength(1)"
}

message GetInfoResponse {
  message Response {
    string name = 1;
    string desc = 2;
    string logo = 3;
    string owner = 4;
    bool isPhysical = 5;
    int64 capacity = 6;
  }
  int32 status = 1;
  oneof response {
    Response data = 2;
    string error = 3;
  }
}

// UpdateWarehouse
message UpdateRequest {
  string warehouseID = 1; // @gotags: valid:"required"
  string name = 2; // @gotags: valid:"required,minstringlength(1)"
  string desc = 3; // @gotags: valid:"required,minstringlength(1)"
  string logo = 4; // @gotags: valid:"url,required"
  bool isPhysical = 5; // @gotags: valid:"-"
  int64 capacity = 6; // @gotags: valid:"int"
}

message UpdateResponse {
  int32 status = 1;
  string response = 2;
}

// CreateWarehouse
message CreateRequest {
  string ownerID = 1; // @gotags: valid:"required"
  string name = 2; // @gotags: valid:"required,minstringlength(1)"
  string desc = 3; // @gotags: valid:"required,minstringlength(1)"
  string logo = 4; // @gotags: valid:"url,optional"
  bool isPhysical = 5; // @gotags: valid:"-"
  int64 capacity = 6; // @gotags: valid:"int"
}

message CreateResponse {
  message Response {
    string warehouseID = 1;
  }
  int32 status = 1;
  oneof response {
    Response data = 2;
    string error = 3;
  }
}

// AddUserToWarehouse
message AddUsersRequest {
  string warehouseID = 1; // @gotags: valid:"required,minstringlength(1)"
  string userIds = 2; // @gotags: valid:"required,minstringlength(1)"
}

message AddUsersResponse {
  int32 status = 1;
  string response = 2;
}

// RemoveUserFromWarehouse
message RemoveUserRequest {
  string warehouseID = 1; // @gotags: valid:"required,minstringlength(1)"
  string userIds = 2; // @gotags: valid:"required,minstringlength(1)"
}

message RemoveUserResponse {
  int32 status = 1;
  string response = 2;
}

// DeleteWarehouse
message DeleteRequest {
  string warehouseID = 1; // @gotags: valid:"required,minstringlength(1)"
}

message DeleteResponse {
  int32 status = 1;
  string response = 2;
}

// ChangeRole

message ChangeRoleRequest {
  string warehouseID = 1; // @gotags: valid:"required,minstringlength(1)"
  string targetUserID = 2; // @gotags: valid:"required,minstringlength(1)"
  string uuid = 3; // @gotags: valid:"required,minstringlength(1)"
  Roles newRole = 4; // @gotags: valid:"-"
}

message ChangeRoleResponse {
  int32 status = 1;
  string response = 2;
}

// Internal

message InternalFetchWarehousesRequest {
  string userID = 1; // @gotags: valid:"required,minstringlength(1)"
}

message InternalFetchWarehousesResponse {
  message Nested {
    string warehouseID = 1;
    Roles role = 2;
  }
  repeated Nested items = 1;
  string error = 2;
}

message InternalFetchWarehouseRoleRequest {
  string warehouseID = 1; // @gotags: valid:"required,minstringlength(1)"
  string userID = 2; // @gotags: valid:"required,minstringlength(1)"
}

message InternalFetchWarehouseRoleResponse {
  message Response {
    Roles role = 1;
  }
  int32 status = 1;
  oneof response {
    Response data = 2;
    string error = 3;
  }
}

message InternalDeleteAccRequest {
  string userID = 1; // @gotags: valid:"required,minstringlength(1)"
}


// Service

service WarehouseService {
  rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);
  rpc UpdateWarehouse (UpdateRequest) returns (UpdateResponse);
  rpc CreateWarehouse (CreateRequest) returns (CreateResponse);
  rpc AddUsersToWarehouse (AddUsersRequest) returns (AddUsersResponse);
  rpc RemoveUserFromWarehouse (RemoveUserRequest) returns (RemoveUserResponse);
  rpc DeleteWarehouse (DeleteRequest) returns (DeleteResponse);
  rpc ChangeRole (ChangeRoleRequest) returns (ChangeRoleResponse);
  rpc InternalFetchWarehouses (InternalFetchWarehousesRequest) returns (InternalFetchWarehousesResponse);
  rpc InternalFetchWarehouseRole (InternalFetchWarehouseRoleRequest) returns (InternalFetchWarehouseRoleResponse);
  rpc InternalDeleteAcc (InternalDeleteAccRequest) returns (google.protobuf.Empty);
}